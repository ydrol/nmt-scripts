#!/bin/sh
# $Id:$
#
# Bundle up zip file. (also a tgz and a tar as HDX platforn only has tar)
# appinfo.json is include for compatibility with CSI installer.
set -e
#set -x
if [ $# -le 1 ] ; then
    echo "usage: $0 appname version [filelist]"
    exit 1
fi

# $1 = name , rest = files
create_packages() {
    mkdir -p packages
    name="$1" ; shift

    #Create the zip package for direct download by the csi installer.
    zip -x*/.svn/* -x*/*~ -r packages/$dest.zip  "$@" 

    #Create the csi inner tar file
    tar --exclude=.svn --exclude=*~ -c -f packages/$name.tar "$@"

    #Create the csi outer zip
    cd packages
    zip csi_$name.zip $name.tar 
    rm $name.tar

    cd ..
}

# $1 = appname
# $2 = Version
# $3 = note
update_csi_xml_repository() {
    awk '

/<Version>/ {
    in_version = 0;
    if ( in_name ) { 
        v="'"$2"'";
        if (!index(v,"BETA") == !index($0,"BETA")) {
            print "     <Version>"v"</Version>" ;
            in_version = 1;
            next;
        }
    }
}

/<DescriptionXX>/ && in_version {
    print $0;
    note="'"$3"'";
    if (note != "" ) {
        print note;
    }
    next;
}

/<DownloadURL>/ && in_version {
    print "     <DownloadURL>http://nmt-mini-installer.googlecode.com/svn/downloads/'"$1"'/csi_'"$1-$2"'.zip</DownloadURL>";
    next;
}
/<InstallScript>/ && in_version {
    print "     <InstallScript>Apps/AppInit/appinit.cgi?install&amp;'"$1-$2"'.tar</InstallScript>";
    next;
}

/<Name>/ {
    in_name=0;
    if (tolower($0) ~ "<name>'"$1"'</name>") {
        in_name=1;
    }
}


1 { print }
' ../downloads/RepositoryInfo.xml > RepositoryInfo.xml &&\
  zip RepositoryInfo.zip RepositoryInfo.xml &&\
  mv RepositoryInfo.??? packages

}

checkpoint() {
    echo ; echo "$@ - Y/n" ; read x
    [ "$x" = "Y" ]
}

##############################################################################

appname=$1 ; shift

version_id=$1 ; shift

case "$version_id" in
	20[01][0-9][01][0-9][0-3][0-9]-[0-9]*)
		echo Version $version_id
		;;
	*)
		echo Invalid version $version_id ;
		exit 1
		;;
esac

rm -f $appname.zip $appname.version $appname.beta.version

#Get version from first file

version_filename=$appname.version

echo $version_id > $version_filename

suffix=
echo "version_id=$version_id" 

app_id=$appname-$version_id

case "$version_id" in
    *BETA)
        suffix="-BETA"
        oldname=$version_filename
        version_filename=$appname.beta.version
        mv $oldname $version_filename
    ;;
esac

sed 's/version=.*/version="'"$version_id"'";/' csi/$appname$suffix-appinfo.json > appinfo.json

dest=$appname$suffix

echo === $version_id ===

grep ^VERSION= "$@" | sed 's/VERSION=//;s/:/	:	/'
echo
echo === latest common files ===
grep ^VERSION= ../nmt-scripts/*.sh
echo

if checkpoint "Create packages for `cat $version_filename` $app_id in ./packages/" ; then

    create_packages "$app_id" appinfo.json $version_filename "$@"

    rm appinfo.json

    if checkpoint "Update CSI Repository file (../nmt-scripts/RepositoryInfo.xml)" ; then

        update_csi_xml_repository "$appname" "$version_id" "$note"

    fi

    rm -f $version_filename
fi 
